<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="Create Crud API implementation and documentation using service and DTO" enabled="true" name="crudcontroller">${:import(java.util.List,&#13;
	org.springframework.beans.factory.annotation.Autowired,&#13;
	org.springframework.http.HttpStatus,&#13;
	org.springframework.http.MediaType,&#13;
	org.springframework.web.bind.annotation.DeleteMapping,&#13;
	org.springframework.web.bind.annotation.GetMapping,&#13;
	org.springframework.web.bind.annotation.PathVariable,&#13;
	org.springframework.web.bind.annotation.PostMapping,&#13;
	org.springframework.web.bind.annotation.PutMapping,&#13;
	org.springframework.web.bind.annotation.RequestBody,&#13;
	org.springframework.web.bind.annotation.RequestMapping,&#13;
	org.springframework.web.bind.annotation.ResponseStatus,&#13;
	org.springframework.web.bind.annotation.RestController,&#13;
	io.swagger.annotations.Api,&#13;
	io.swagger.annotations.ApiOperation)}&#13;
&#13;
	@Autowired&#13;
	private ${ResourceService} ${rsourceService};&#13;
&#13;
	/**&#13;
	 * Method to create a resource&#13;
	 * &#13;
	 * @param ${resourceDto} The resource to create&#13;
	 * @return The created resource&#13;
	 */&#13;
	@PostMapping(path = "", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)&#13;
	@ResponseStatus(HttpStatus.CREATED)&#13;
	@ApiOperation(value = "Create a resource")&#13;
	public ${ResourceDto} createResource(@RequestBody final ${ResourceDto} ${resourceDto}) {&#13;
		return ${rsourceService}.createResource(${resourceDto});&#13;
	}&#13;
&#13;
	/**&#13;
	 * Method to delete a resource&#13;
	 * &#13;
	 * @param id The ID of the resource to be deleted&#13;
	 */&#13;
	@DeleteMapping(path = "/{id}")&#13;
	@ResponseStatus(HttpStatus.NO_CONTENT)&#13;
	@ApiOperation(value = "Delete a resource")&#13;
	public void deleteResource(@PathVariable final ${IdType} id) {&#13;
		${rsourceService}.deleteResource(id);&#13;
	}&#13;
&#13;
	/**&#13;
	 * Method to get all resources&#13;
	 * &#13;
	 * @return List of all resources&#13;
	 */&#13;
	@GetMapping(path = "", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)&#13;
	@ApiOperation(value = "Get all resources")&#13;
	public List&lt;${ResourceDto}&gt; getAllResources() {&#13;
		return ${rsourceService}.readAllResources();&#13;
	}&#13;
&#13;
	/**&#13;
	 * Method to get a resource given its ID&#13;
	 * @param id ID of the resource to get&#13;
	 * @return The resource to get if it is available&#13;
	 */&#13;
	@GetMapping(path = "/{id}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)&#13;
	@ApiOperation(value = "Get a resource")&#13;
	public ${ResourceDto} getResource(@PathVariable final ${IdType} id) {&#13;
		return ${rsourceService}.readResource(id);&#13;
	}&#13;
&#13;
	/**&#13;
	 * Method to update a resource&#13;
	 * &#13;
	 * @param id          The ID of the resource to update&#13;
	 * @param ${resourceDto} The resource to update&#13;
	 * @return The updated resource&#13;
	 */&#13;
	@PutMapping(path = "/{id}", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)&#13;
	@ApiOperation(value = "Upadte a resource")&#13;
	public ${ResourceDto} updateResource(@PathVariable final ${IdType} id, @RequestBody final ${ResourceDto} ${resourceDto}) {&#13;
		return ${rsourceService}.updateResource(id, ${resourceDto});&#13;
	}</template><template autoinsert="true" context="java" deleted="false" description="A model to dto mapper interface and vice versa" enabled="true" name="crudmapper">${:import(java.util.List,&#13;
	java.util.ArrayList&#13;
)}&#13;
&#13;
/**&#13;
 * EntityMapper interface that a mapper implementation between DTOs and entities will inherit&#13;
 * @author mharb&#13;
 *&#13;
 * @param &lt;E&gt; The entity object&#13;
 * @param &lt;D&gt; The DTO object&#13;
 */&#13;
public interface EntityMapper&lt;E, D&gt; {&#13;
&#13;
	/**&#13;
	 * Maps an entity object to its corresponding DTO&#13;
	 * &#13;
	 * @param entity The entity to map&#13;
	 * @return The DTO it is mapped to&#13;
	 */&#13;
	public abstract D toDto(final E entity);&#13;
&#13;
	/**&#13;
	 * Maps a list of entities to a corresponding list of DTOs&#13;
	 * &#13;
	 * @param entities The list of entities to map&#13;
	 * @return The corresponding list of DTOs&#13;
	 */&#13;
	public default List&lt;D&gt; toDto(final List&lt;E&gt; entities) {&#13;
		final List&lt;D&gt; dtos = new ArrayList&lt;&gt;();&#13;
		entities.forEach(entity -&gt; dtos.add(toDto(entity)));&#13;
		return dtos;&#13;
	}&#13;
&#13;
	/**&#13;
	 * Maps a list of DTOs to a corresponding list of entities&#13;
	 * &#13;
	 * @param dtos The list of DTOs to map&#13;
	 * @return The corresponding list of entities&#13;
	 */&#13;
	public default List&lt;E&gt; toEnity(final List&lt;D&gt; dtos) {&#13;
		final List&lt;E&gt; entities = new ArrayList&lt;&gt;();&#13;
		dtos.forEach(dto -&gt; entities.add(toEntity(dto)));&#13;
		return entities;&#13;
	}&#13;
&#13;
	/**&#13;
	 * Maps a DTO object to its corresponding entity&#13;
	 * &#13;
	 * @param dto The DTO to map&#13;
	 * @return The entity it is mapped to&#13;
	 */&#13;
	public abstract E toEntity(final D dto);&#13;
&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="Create a CRUD JPA repository for a resource" enabled="true" name="crudrepository">${:import(java.util.List,&#13;
	org.springframework.data.jpa.repository.JpaRepository,&#13;
	org.springframework.stereotype.Repository)}&#13;
&#13;
/**&#13;
 * ${Resource} repository interface&#13;
 * @author mharb&#13;
 *&#13;
 */&#13;
@Repository&#13;
public interface ${ResourceRepository} extends JpaRepository&lt;${Resource}, ${IdType}&gt; {&#13;
	&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="Create an implementation for a CRUD service using model, DTO, Mapper and repository" enabled="true" name="crudservice">${:import(java.util.List,&#13;
		java.util.Optional,&#13;
		org.springframework.beans.factory.annotation.Autowired,&#13;
		org.springframework.http.HttpStatus,&#13;
		org.springframework.stereotype.Service,&#13;
		org.springframework.web.server.ResponseStatusException)}&#13;
&#13;
	@Autowired&#13;
	private EntityMapper&lt;${Resource}, ${ResourceDto}&gt; resourceMapper;&#13;
&#13;
	@Autowired&#13;
	private ${ResourceRepository} resourceRepository;&#13;
&#13;
	@Override&#13;
	public ${ResourceDto} createResource(final ${ResourceDto} resourceDto) {&#13;
		if (resourceDto != null) {&#13;
			final ${Resource} resource = resourceRepository.save(resourceMapper.toEntity(resourceDto));&#13;
			return resourceMapper.toDto(resource);&#13;
		} else {&#13;
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "No resource found");&#13;
		}&#13;
	}&#13;
&#13;
	@Override&#13;
	public void deleteResource(final ${IdType} id) {&#13;
		resourceRepository.deleteById(id);&#13;
	}&#13;
&#13;
	@Override&#13;
	public List&lt;${ResourceDto}&gt; readAllResources() {&#13;
		return resourceMapper.toDto(resourceRepository.findAll());&#13;
	}&#13;
&#13;
	@Override&#13;
	public ${ResourceDto} readResource(final ${IdType} id) {&#13;
		final Optional&lt;${Resource}&gt; possibleResource = resourceRepository.findById(id);&#13;
		if (possibleResource.isPresent()) {&#13;
			return resourceMapper.toDto(possibleResource.get());&#13;
		} else {&#13;
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Unable to find resource");&#13;
		}&#13;
	}&#13;
&#13;
	@Override&#13;
	public ${ResourceDto} updateResource(final ${IdType} id, final ${ResourceDto} resourceDto) {&#13;
		if (id != null &amp;&amp; resourceDto != null) {&#13;
			resourceDto.setId(id);&#13;
			final ${Resource} resource = resourceRepository.save(resourceMapper.toEntity(resourceDto));&#13;
			return resourceMapper.toDto(resource);&#13;
		} else {&#13;
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "You have to have a valid resource");&#13;
		}&#13;
	}</template><template autoinsert="true" context="java" deleted="false" description="Create a CRUD service interface using DTO" enabled="true" name="crudservicei">${:import(java.util.List)}&#13;
&#13;
	/**&#13;
	 * Method to create a resource&#13;
	 * &#13;
	 * @param ${resourceDto} The resource to create&#13;
	 * @return The created resource&#13;
	 */&#13;
	public ${ResourceDto} createResource(final ${ResourceDto} ${resourceDto});&#13;
&#13;
	/**&#13;
	 * Method to delete a resource&#13;
	 * &#13;
	 * @param id The ID of the resource to be deleted&#13;
	 */&#13;
	public void deleteResource(final ${IdType} id);&#13;
&#13;
	/**&#13;
	 * Method to get all resources&#13;
	 * &#13;
	 * @return List of all resources&#13;
	 */&#13;
	public List&lt;${ResourceDto}&gt; readAllResources();&#13;
&#13;
	/**&#13;
	 * Method to get a resource given its ID&#13;
	 * &#13;
	 * @param id ID of the resource to get&#13;
	 * @return The resource to get if it is available&#13;
	 */&#13;
	public ${ResourceDto} readResource(final ${IdType} id);&#13;
&#13;
	/**&#13;
	 * Method to update a resource&#13;
	 * &#13;
	 * @param id          The ID of the resource to update&#13;
	 * @param ${resourceDto} The resource to update&#13;
	 * @return The updated resource&#13;
	 */&#13;
	public ${ResourceDto} updateResource(final ${IdType} id, final ${ResourceDto} ${resourceDto});</template></templates>