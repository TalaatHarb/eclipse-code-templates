<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="Create Crud API implementation and documentation using service and DTO" enabled="true" name="crudcontroller">${:import(java.util.List,&#13;
	org.springframework.beans.factory.annotation.Autowired,&#13;
	org.springframework.http.HttpStatus,&#13;
	org.springframework.http.MediaType,&#13;
	org.springframework.web.bind.annotation.DeleteMapping,&#13;
	org.springframework.web.bind.annotation.GetMapping,&#13;
	org.springframework.web.bind.annotation.PathVariable,&#13;
	org.springframework.web.bind.annotation.PostMapping,&#13;
	org.springframework.web.bind.annotation.PutMapping,&#13;
	org.springframework.web.bind.annotation.RequestBody,&#13;
	org.springframework.web.bind.annotation.RequestMapping,&#13;
	org.springframework.web.bind.annotation.ResponseStatus,&#13;
	org.springframework.web.bind.annotation.RestController,&#13;
	io.swagger.annotations.Api,&#13;
	io.swagger.annotations.ApiOperation)}&#13;
&#13;
/**&#13;
 * ${Resource} controller&#13;
 * @author mharb&#13;
 *&#13;
 */&#13;
@RestController&#13;
@RequestMapping(path = "/api/${resource}s")&#13;
@Api(tags = { "${Resource}" })&#13;
public class ${Resource}Controller {&#13;
	@Autowired&#13;
	private ${ResourceService} ${resource}Service;&#13;
&#13;
	/**&#13;
	 * Method to create a ${Resource}&#13;
	 * &#13;
	 * @param ${resourceDto} The ${Resource} to create&#13;
	 * @return The created ${Resource}&#13;
	 */&#13;
	@PostMapping(path = "", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)&#13;
	@ResponseStatus(HttpStatus.CREATED)&#13;
	@ApiOperation(value = "Create a ${Resource}")&#13;
	public ${ResourceDto} create${Resource}(@RequestBody final ${ResourceDto} ${resourceDto}) {&#13;
		return ${resource}Service.create${Resource}(${resourceDto});&#13;
	}&#13;
&#13;
	/**&#13;
	 * Method to delete a ${Resource}&#13;
	 * &#13;
	 * @param id The ID of the ${Resource} to be deleted&#13;
	 */&#13;
	@DeleteMapping(path = "/{id}")&#13;
	@ResponseStatus(HttpStatus.NO_CONTENT)&#13;
	@ApiOperation(value = "Delete a ${Resource}")&#13;
	public void delete${Resource}(@PathVariable final ${IdType} id) {&#13;
		${resource}Service.delete${Resource}(id);&#13;
	}&#13;
&#13;
	/**&#13;
	 * Method to get all ${Resource}s&#13;
	 * &#13;
	 * @return List of all ${Resource}s&#13;
	 */&#13;
	@GetMapping(path = "", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)&#13;
	@ApiOperation(value = "Get all ${Resource}s")&#13;
	public List&lt;${ResourceDto}&gt; getAll${Resource}s() {&#13;
		return ${resource}Service.readAll${Resource}s();&#13;
	}&#13;
&#13;
	/**&#13;
	 * Method to get a ${Resource} given its ID&#13;
	 * @param id ID of the ${Resource} to get&#13;
	 * @return The ${Resource} to get if it is available&#13;
	 */&#13;
	@GetMapping(path = "/{id}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)&#13;
	@ApiOperation(value = "Get a ${Resource}")&#13;
	public ${ResourceDto} get${Resource}(@PathVariable final ${IdType} id) {&#13;
		return ${resource}Service.read${Resource}(id);&#13;
	}&#13;
&#13;
	/**&#13;
	 * Method to update a ${Resource}&#13;
	 * &#13;
	 * @param id          The ID of the ${Resource} to update&#13;
	 * @param ${resourceDto} The ${Resource} to update&#13;
	 * @return The updated ${Resource}&#13;
	 */&#13;
	@PutMapping(path = "/{id}", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)&#13;
	@ApiOperation(value = "Upadte a ${Resource}")&#13;
	public ${ResourceDto} update${Resource}(@PathVariable final ${IdType} id, @RequestBody final ${ResourceDto} ${resourceDto}) {&#13;
		return ${resource}Service.update${Resource}(id, ${resourceDto});&#13;
	}&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="Create a DTO for a CRUD model using Lombok" enabled="true" name="cruddto">${:import(lombok.Getter,&#13;
	lombok.NoArgsConstructor,&#13;
	lombok.Setter)}&#13;
&#13;
/**&#13;
 * ${ResourceDto} entity&#13;
 * @author mharb&#13;
 *&#13;
 */&#13;
@Getter&#13;
@Setter&#13;
@NoArgsConstructor&#13;
public class ${ResourceDto} {&#13;
&#13;
	/**&#13;
	 * ID of the ${ResourceDto}&#13;
	 */&#13;
	private ${IdType} id;&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="Create an empty implementation of an entity mapper" enabled="true" name="crudmapper">${:import(org.springframework.stereotype.Component)}&#13;
&#13;
/**&#13;
 * An implementation of a mapper for ${Resource}s&#13;
 * @author mharb&#13;
 *&#13;
 */&#13;
@Component&#13;
public class ${fileName} implements EntityMapper&lt;${Resource}, ${ResourceDto}&gt; {&#13;
&#13;
	@Override&#13;
	public ${ResourceDto} toDto(final ${Resource} entity) {&#13;
		final ${ResourceDto} dto = new ${ResourceDto}();&#13;
		${cursor}&#13;
		return dto;&#13;
	}&#13;
&#13;
	@Override&#13;
	public ${Resource} toEntity(final ${ResourceDto} dto) {&#13;
		final ${Resource} entity = new ${Resource}();&#13;
		&#13;
		return entity;&#13;
	}&#13;
&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="A model to dto mapper interface and vice versa" enabled="true" name="crudmapperi">${:import(java.util.List,&#13;
	java.util.ArrayList&#13;
)}&#13;
&#13;
/**&#13;
 * EntityMapper interface that a mapper implementation between DTOs and entities will inherit&#13;
 * @author mharb&#13;
 *&#13;
 * @param &lt;E&gt; The entity object&#13;
 * @param &lt;D&gt; The DTO object&#13;
 */&#13;
public interface EntityMapper&lt;E, D&gt; {&#13;
&#13;
	/**&#13;
	 * Maps an entity object to its corresponding DTO&#13;
	 * &#13;
	 * @param entity The entity to map&#13;
	 * @return The DTO it is mapped to&#13;
	 */&#13;
	public abstract D toDto(final E entity);&#13;
&#13;
	/**&#13;
	 * Maps a list of entities to a corresponding list of DTOs&#13;
	 * &#13;
	 * @param entities The list of entities to map&#13;
	 * @return The corresponding list of DTOs&#13;
	 */&#13;
	public default List&lt;D&gt; toDto(final List&lt;E&gt; entities) {&#13;
		final List&lt;D&gt; dtos = new ArrayList&lt;&gt;();&#13;
		entities.forEach(entity -&gt; dtos.add(toDto(entity)));&#13;
		return dtos;&#13;
	}&#13;
&#13;
	/**&#13;
	 * Maps a list of DTOs to a corresponding list of entities&#13;
	 * &#13;
	 * @param dtos The list of DTOs to map&#13;
	 * @return The corresponding list of entities&#13;
	 */&#13;
	public default List&lt;E&gt; toEnity(final List&lt;D&gt; dtos) {&#13;
		final List&lt;E&gt; entities = new ArrayList&lt;&gt;();&#13;
		dtos.forEach(dto -&gt; entities.add(toEntity(dto)));&#13;
		return entities;&#13;
	}&#13;
&#13;
	/**&#13;
	 * Maps a DTO object to its corresponding entity&#13;
	 * &#13;
	 * @param dto The DTO to map&#13;
	 * @return The entity it is mapped to&#13;
	 */&#13;
	public abstract E toEntity(final D dto);&#13;
&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="A test for a mapper between entity and a DTO" enabled="true" name="crudmappert">${:import(java.util.Arrays,&#13;
	java.util.List,&#13;
	org.springframework.beans.factory.annotation.Autowired,&#13;
	org.junit.Before,&#13;
	org.junit.Test&#13;
)}&#13;
&#13;
/**&#13;
 * Tests for the ${resource} mapper&#13;
 * @author mharb&#13;
 *&#13;
 */&#13;
public class ${ResourceMapper}Test {&#13;
&#13;
	private ${ResourceDto} dto;&#13;
&#13;
	private List&lt;${ResourceDto}&gt; dtos;&#13;
&#13;
	private List&lt;${Resource}&gt; entities;&#13;
&#13;
	private ${Resource} entity;&#13;
&#13;
	@Autowired&#13;
	private EntityMapper&lt;${Resource}, ${ResourceDto}&gt; ${resource}Mapper;&#13;
&#13;
	/**&#13;
	 * Assert equal entity and DTO&#13;
	 * &#13;
	 * @param entity Entity to assert&#13;
	 * @param dto    DTO to assert&#13;
	 */&#13;
	private void assertEqualEntityDto(final ${Resource} entity, final ${ResourceDto} dto) {&#13;
		${cursor}&#13;
	}&#13;
&#13;
	/**&#13;
	 * Setup method for ${resource} mapper&#13;
	 */&#13;
	@Before&#13;
	public void setup() {&#13;
		entity = new ${Resource}();&#13;
		// TODO Fill in the details of the entity&#13;
		&#13;
		dto = new ${ResourceDto}();&#13;
		// TODO Fill in the details of the DTO&#13;
		&#13;
		entities = Arrays.asList(entity, new ${Resource}());&#13;
		&#13;
		dtos = Arrays.asList(dto, new ${ResourceDto}());&#13;
	}&#13;
&#13;
	/**&#13;
	 * Testing the 'toDto' method of a ${resource} mapper, for converting single DTO&#13;
	 */&#13;
	@Test&#13;
	public void testToDto() {&#13;
		final ${ResourceDto} resultDto = ${resource}Mapper.toDto(entity);&#13;
		assertEqualEntityDto(entity, resultDto);&#13;
	}&#13;
&#13;
	/**&#13;
	 * Testing the 'toDto' method of a ${resource} mapper, for converting a list of DTOs&#13;
	 */&#13;
	@Test&#13;
	public void testToDtoList() {&#13;
		final List&lt;${ResourceDto}&gt; resultDtos = ${resource}Mapper.toDto(entities);&#13;
		for (int i = 0; i &lt; entities.size(); i++) {&#13;
			assertEqualEntityDto(entities.get(i), resultDtos.get(i));&#13;
		}&#13;
	}&#13;
&#13;
	/**&#13;
	 * Testing the 'toEntity' method of a ${resource} mapper, for converting single entity&#13;
	 */&#13;
	@Test&#13;
	public void testToEntity() {&#13;
		final ${Resource} resultEntity = ${resource}Mapper.toEntity(dto);&#13;
		assertEqualEntityDto(resultEntity, dto);&#13;
	}&#13;
&#13;
	/**&#13;
	 * Testing the 'toEntity' method of a ${resource} mapper, for converting a list of entities&#13;
	 */&#13;
	@Test&#13;
	public void testToEntityList() {&#13;
		final List&lt;${Resource}&gt; resultEntities = ${resource}Mapper.toEnity(dtos);&#13;
		for (int i = 0; i &lt; dtos.size(); i++) {&#13;
			assertEqualEntityDto(resultEntities.get(i), dtos.get(i));&#13;
		}&#13;
	}&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="Create a CRUD model with only ID field using Lombok" enabled="true" name="crudmodel">${:import(javax.persistence.Entity,&#13;
javax.persistence.Id,&#13;
lombok.Getter,&#13;
lombok.NoArgsConstructor,&#13;
lombok.Setter)}&#13;
&#13;
/**&#13;
 * ${Resource} entity&#13;
 * @author mharb&#13;
 *&#13;
 */&#13;
@Getter&#13;
@Setter&#13;
@NoArgsConstructor&#13;
@Entity&#13;
public class ${Resource} {&#13;
&#13;
	/**&#13;
	 * ID of the ${Resource}&#13;
	 */&#13;
	@Id&#13;
	private ${IdType} id;&#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Create a CRUD JPA repository for a resource" enabled="true" name="crudrepository">${:import(java.util.List,&#13;
	org.springframework.data.jpa.repository.JpaRepository,&#13;
	org.springframework.stereotype.Repository)}&#13;
&#13;
/**&#13;
 * ${Resource} repository interface&#13;
 * @author mharb&#13;
 *&#13;
 */&#13;
@Repository&#13;
public interface ${Resource}Repository extends JpaRepository&lt;${Resource}, ${IdType}&gt; {&#13;
	${cursor}&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="Create an implementation for a CRUD service using model, DTO, Mapper and repository" enabled="true" name="crudservice">${:import(java.util.List,&#13;
		java.util.Optional,&#13;
		org.springframework.beans.factory.annotation.Autowired,&#13;
		org.springframework.http.HttpStatus,&#13;
		org.springframework.stereotype.Service,&#13;
		org.springframework.web.server.ResponseStatusException)}&#13;
&#13;
/**&#13;
 * Implementation of the ${ResourceService} interface&#13;
 * @author mharb&#13;
 *&#13;
 */&#13;
@Service&#13;
public class ${ResourceService}Impl implements ${ResourceService} {&#13;
&#13;
	@Autowired&#13;
	private EntityMapper&lt;${Resource}, ${ResourceDto}&gt; ${resource}Mapper;&#13;
&#13;
	@Autowired&#13;
	private ${Resource}Repository ${resource}Repository;&#13;
&#13;
	@Override&#13;
	public ${ResourceDto} create${Resource}(final ${ResourceDto} ${resource}Dto) {&#13;
		if (${resource}Dto != null) {&#13;
			final ${Resource} ${resource} = ${resource}Repository.save(${resource}Mapper.toEntity(${resource}Dto));&#13;
			return ${resource}Mapper.toDto(${resource});&#13;
		} else {&#13;
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "No ${Resource} found");&#13;
		}&#13;
	}&#13;
&#13;
	@Override&#13;
	public void delete${Resource}(final ${IdType} id) {&#13;
		${resource}Repository.deleteById(id);&#13;
	}&#13;
&#13;
	@Override&#13;
	public List&lt;${ResourceDto}&gt; readAll${Resource}s() {&#13;
		return ${resource}Mapper.toDto(${resource}Repository.findAll());&#13;
	}&#13;
&#13;
	@Override&#13;
	public ${ResourceDto} read${Resource}(final ${IdType} id) {&#13;
		final Optional&lt;${Resource}&gt; possibleResource = ${resource}Repository.findById(id);&#13;
		if (possibleResource.isPresent()) {&#13;
			return ${resource}Mapper.toDto(possibleResource.get());&#13;
		} else {&#13;
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Unable to find ${Resource}");&#13;
		}&#13;
	}&#13;
&#13;
	@Override&#13;
	public ${ResourceDto} update${Resource}(final ${IdType} id, final ${ResourceDto} ${resource}Dto) {&#13;
		if (id != null &amp;&amp; ${resource}Dto != null) {&#13;
			${resource}Dto.setId(id);&#13;
			final ${Resource} ${resource} = ${resource}Repository.save(${resource}Mapper.toEntity(${resource}Dto));&#13;
			return ${resource}Mapper.toDto(${resource});&#13;
		} else {&#13;
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "You have to have a valid ${Resource}");&#13;
		}&#13;
	}&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="Create a CRUD service interface" enabled="true" name="crudservicei">${:import(java.util.List)}&#13;
&#13;
/**&#13;
 * An interface for performing ${Resource} related tasks in the back-end&#13;
 * @author mharb&#13;
 *&#13;
 */&#13;
public interface ${ResourceService} {&#13;
	/**&#13;
	 * Method to create a ${Resource}&#13;
	 * &#13;
	 * @param ${resourceDto} The ${Resource} to create&#13;
	 * @return The created ${Resource}&#13;
	 */&#13;
	public ${ResourceDto} create${Resource}(final ${ResourceDto} ${resourceDto});&#13;
&#13;
	/**&#13;
	 * Method to delete a ${Resource}&#13;
	 * &#13;
	 * @param id The ID of the ${Resource} to be deleted&#13;
	 */&#13;
	public void delete${Resource}(final ${IdType} id);&#13;
&#13;
	/**&#13;
	 * Method to get all ${Resource}s&#13;
	 * &#13;
	 * @return List of all ${Resource}s&#13;
	 */&#13;
	public List&lt;${ResourceDto}&gt; readAll${Resource}s();&#13;
&#13;
	/**&#13;
	 * Method to get a ${Resource} given its ID&#13;
	 * &#13;
	 * @param id ID of the ${Resource} to get&#13;
	 * @return The ${Resource} to get if it is available&#13;
	 */&#13;
	public ${ResourceDto} read${Resource}(final ${IdType} id);&#13;
&#13;
	/**&#13;
	 * Method to update a ${Resource}&#13;
	 * &#13;
	 * @param id          The ID of the ${Resource} to update&#13;
	 * @param ${resourceDto} The ${Resource} to update&#13;
	 * @return The updated ${Resource}&#13;
	 */&#13;
	public ${ResourceDto} update${Resource}(final ${IdType} id, final ${ResourceDto} ${resourceDto});&#13;
}</template></templates>